name: Vercel Preview Deployment

on:
  pull_request:
    branches:
      - develop
    types:
      - opened
  pull_request_review:
    types: [submitted, edited]

jobs:
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: npm install

      - name: Deploy to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        run: |
          npm install -g vercel
          DEPLOY_OUTPUT=$(vercel --token $VERCEL_TOKEN --scope $VERCEL_ORG_ID deploy --yes)
          echo "$DEPLOY_OUTPUT"
          DEPLOY_URL=$(echo "$DEPLOY_OUTPUT" | grep -oE "https://[a-zA-Z0-9.-]+.vercel.app")
          echo "Preview URL: $DEPLOY_URL"
          echo "DEPLOY_URL=$DEPLOY_URL" >> $GITHUB_ENV

      - name: Output deployment URL
        run: |
          echo "Deployment Preview URL: ${{ env.DEPLOY_URL }}"

      - name: Comment on Pull Request
        if: github.event_name == 'pull_request' || github.event_name == 'pull_request_review'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commentBody = `ü§† A new preview deployment of Wordly is ready !\n\nüåç **Preview URL:** [${{ env.DEPLOY_URL }}](${{ env.DEPLOY_URL }})`;
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const existingComment = comments.find(comment => comment.body.includes('üåç **Preview URL:**'));
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody,
              });
            }
